version: "3.9"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:5.4.0
    hostname: kafka
    ports:
      - ${EXPOSED_KAFKA_PORT}:${EXPOSED_KAFKA_PORT}
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:${EXPOSED_KAFKA_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://${KAFKA_ADVERTISED_HOST}:${EXPOSED_KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  redis:
    image: redis
    hostname: redis
    restart: unless-stopped
    ports:
      - "26379:6379"
    volumes:
      - ./redis/data:/data
      - ./redis/redis.conf:/usr/local/etc/redis.conf
    command: redis-server /usr/local/etc/redis.conf
      
  postgres:
    hostname: postgres
    image: postgres
    ports:
      - ${EXPOSED_POSTGRES_PORT}:5432
    volumes:
      - ./postgres/scripts:/docker-entrypoint-initdb.d
      - ./postgres/pgdata:/var/lib/postgresql/pgdata
    environment:
      POSTGRES_DB: trade_history
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: b7Mg4UmK
      PGDATA: /var/lib/postgresql/pgdata

  marketprice:
    build: ./marketprice
    environment:
      - NODE_ENV=development
    env_file:
      - marketprice/.env
    volumes:
      - ./marketprice:/usr/src/marketprice
      - /usr/src/marketprice/node_modules
    depends_on:
      - zookeeper
      - kafka
    restart: always
    command: npm run dev

  matchengine:
    build: ./matchengine
    environment:
      - NODE_ENV=development
    env_file:
      - matchengine/.env
    volumes:
      - ./matchengine:/usr/src/matchengine
      - /usr/src/matchengine/node_modules
    depends_on:
      - kafka
    restart: always
    command: npm run dev

  readhistory:
    build: ./readhistory
    environment:
      - NODE_ENV=development
    env_file:
      - readhistory/.env
    volumes:
      - ./readhistory:/usr/src/readhistory
      - /usr/src/readhistory/node_modules
    restart: always
    command: npm run dev

  router:
    build: ./router
    environment:
      - NODE_ENV=development
    env_file:
      - router/.env
    volumes:
      - ./router:/usr/src/router
      - /usr/src/router/node_modules
    ports:
      - ${EXPOSED_ROUTER_PORT}:3003
    restart: always
    command: npm run dev

  websocket:
    build: ./websocket
    environment:
      - NODE_ENV=development
    env_file:
      - websocket/.env
    volumes:
      - ./websocket:/usr/src/websocket
      - /usr/src/websocket/node_modules
    ports:
      - ${EXPOSED_WEBSOCKET_PORT}:3031
    restart: always
    command: npm run dev

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  pg-dataset:
